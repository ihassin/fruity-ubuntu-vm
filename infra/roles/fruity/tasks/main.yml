---
  - name: Install needed packages for the development environment
    apt: pkg={{item}} state=installed
    with_items:
      - build-essential
      - libbluetooth-dev
      - bluez
      - rfkill
      - bluetooth
      - lib32z1
      - lib32ncurses5
      - unzip
      - minicom
      - screen
      - binutils-avr
      - binutils-arm-none-eabi
      - cmake

  - name: Create directories
    file: path={{item}} state=directory
    with_items:
      - "{{downloads}}"
      - "{{home}}/.bash"

  - name: See if cross-compiler installed
    stat: path=/usr/local/{{toolchain_base}}
    register: cc_installed

  - name: See if cross-compiler copied
    stat: path="{{downloads}}/{{toolchain_full}}"
    register: cc_copied
    when: not cc_installed.stat.exists

  - name: Copy cross compiler
    copy: src={{toolchain_full}} dest={{downloads}}/{{toolchain_full}}
    when: not cc_installed.stat.exists and not cc_copied.stat.exists

  - name: Unarchive the cross compiler
    unarchive: src={{downloads}}/{{toolchain_full}} dest=/usr/local copy=no mode="u=rwx,g=rwx,o=rwx"
    when: not cc_installed.stat.exists

  - name: Update fruitymesh-devenv project from git
    git: repo=https://github.com/mwaylabs/fruitymesh-devenv.git dest={{nrf}} accept_hostkey=true

  - name: See if JLink is installed
    shell: "dpkg -l | grep jlink"
    ignore_errors: true
    register: jlink_installed

  - name: See if Jlink has already been copied
    stat: path={{downloads}}/jlink_5.2.4_x86_64.deb
    register: jlink_copied
    when: jlink_installed.rc == 1

  - name: Copy JLink
    copy: src=jlink_5.2.4_x86_64.deb dest={{downloads}}
    when: jlink_installed.rc == 1 and not jlink_copied.stat.exists

  - name: Install JLink
    shell: sudo dpkg -i {{downloads}}/jlink_5.2.4_x86_64.deb
    when: jlink_installed.rc == 1

  - name: See if Jlink symlink exists
    stat: path={{nrf}}/tools/jlink
    register: jlink_link

  - name: See if SDK51 was downloaded
    stat: path={{downloads}}/{{nrf51_sdk}}
    register: sdk_zip

  - name: Download SDK51
    get_url: url=https://developer.nordicsemi.com/nRF51_SDK/nRF51_SDK_v9.x.x/{{nrf51_sdk}} dest={{downloads}}
    when: not sdk_zip.stat.exists

  - name: See if SDK51 was installed
    stat: path={{nrf_sdk_9_0}}/components
    register: sdk_unzipped

  - name: Install SDK51
    unarchive: src={{downloads}}/{{nrf51_sdk}} dest={{nrf_sdk_9_0}} mode="u=rw,g=r,o=r" copy=no
    when: not sdk_unzipped.stat.exists

  - name: See if SDK52 was downloaded
    stat: path={{downloads}}/{{nrf52_sdk}}
    register: sdk52_zip

  - name: Download SDK52
    get_url: url=https://developer.nordicsemi.com/nRF52_SDK/nRF52_SDK_v0.x.x/{{nrf52_sdk}} dest={{downloads}}
    when: not sdk52_zip.stat.exists

  - name: See if SDK52 was installed
    stat: path={{nrf52_sdk_9_0}}/components
    register: sdk52_unzipped

  - name: Install SDK52
    unarchive: src={{downloads}}/{{nrf52_sdk}} dest={{nrf52_sdk_9_0}} mode="u=rw,g=r,o=r" copy=no
    when: not sdk52_unzipped.stat.exists

  - name: See if EHAL link exists
    stat: path={{nrf}}/sdk/ehal_2015_09_08/ARM/CMSIS
    register: ehal_link

  - name: Update fruitymesh project from git
    git: repo=https://github.com/mwaylabs/fruitymesh.git dest={{nrf}}/projects/fruitymesh accept_hostkey=true update=no

  - name: Create nrf51 sdk latest symlink
    file: src={{nrf_sdk_9_0}} dest={{nrf}}/sdk/nrf51_sdk_latest state=link

  - name: Create nrf52 sdk latest symlink
    file: src={{nrf52_sdk_9_0}} dest={{nrf}}/sdk/nrf52_sdk_latest state=link

  - name: Create ehal latest symlink
    file: src={{nrf}}/sdk/ehal_2015_09_08 dest={{nrf}}/sdk/ehal_latest state=link

  - name: Fix 51 path to GNU
    lineinfile: dest={{nrf}}/sdk/nrf51_sdk_latest/components/toolchain/gcc/Makefile.posix regexp='^GNU_INSTALL_ROOT :=' line="GNU_INSTALL_ROOT := /usr/local/{{toolchain_base}}"

  - name: Fix 52 path to GNU
    lineinfile: dest={{nrf}}/sdk/nrf52_sdk_latest/components/toolchain/gcc/Makefile.posix regexp='^GNU_INSTALL_ROOT :=' line="GNU_INSTALL_ROOT := /usr/local/{{toolchain_base}}"

  - name: Copy patched header file
    copy: src=nrf_svc.h dest={{nrf}}/sdk/nrf51_sdk_latest/components/softdevice/s130/headers/nrf_svc.h owner={{user}} group={{user}}

  - name: Create jlink symlink
    file: src=/usr/bin/JLinkExe dest={{nrf}}/tools/jlink state=link owner={{user}} group={{user}}
    when: not jlink_link.stat.exists

  - name: Include jlink in path
    lineinfile: dest={{home}}/.bashrc line='export PATH=$PATH:/{{nrf}}/tools:' regexp='export PATH=$PATH:/{{nrf}}/tools:'

  - name: Create EHAL symlink
    file: src={{nrf}}/sdk/arm_cmsis_4_3/CMSIS dest={{nrf}}/sdk/ehal_latest/ARM/CMSIS state=link
    when: not ehal_link.stat.exists

  - name: Remove unnecessary files
    file: path={{item}} state=absent
    with_items:
      - '"{{nrf}}/sdk/nrf_sdk_9_0/put_sdk_9_0_0 files here"'
      - '"{{nrf}}/sdk/nrf52_sdk_9_0/put_nrf52_sdk_files here"'
      - '"{{nrf}}/projects/put your project folders here"'

  - name: Add support for git-aware bash prompt
    git: repo=git://github.com/jimeh/git-aware-prompt.git dest={{home}}/.bash/git-aware-prompt accept_hostkey=true

  - name: Include git-aware in bashrc
    lineinfile: dest={{home}}/.bashrc line='export GITAWAREPROMPT=~/.bash/git-aware-prompt' regexp='export GITAWAREPROMPT=~/.bash/git-aware-prompt'

  - name: Include git-aware in bashrc
    lineinfile: dest={{home}}/.bashrc line='source ~/.bash/git-aware-prompt/main.sh' regexp='source ~/.bash/git-aware-prompt/main.sh'

  - name: Set the git-aware prompt
    lineinfile: dest={{home}}/.bashrc line='export PS1="\${debian_chroot:+(\$debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\] \[$txtcyn\]\$git_branch\[$txtred\]\$git_dirty\[$txtrst\]\$ "'

  - name: Copy gitconfig file
    copy: src=.gitconfig dest={{home}}/.gitconfig owner={{user}} group={{user}}

  - name: Set ownership of our files
    file: path={{item}} owner={{user}} group={{user}} recurse=yes state=directory
    with_items:
      - "{{nrf}}"
      - "{{downloads}}"
      - "{{home}}/.bash"

  - name: Create symlink to shared folder in home
    file: src={{vagrantShare}} dest={{shared}} owner={{user}} group={{user}} state=link
